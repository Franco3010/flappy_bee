{"version":3,"sources":["index.tsx"],"names":["indexPipe","canvas","createStage","getCanvas","viewport","createViewport","inputHandler","createViewportAwareInputHandler","score","Realscore","stop","Time_gia_toc","rotateAngle","roatateTime","a","gl","getContext","camera","getCamera","batch","createBatch","whiteTex","createWhiteTexture","loadTexture","birdsImg","pipeImg","pipeDownImg","signImg","number1","number2","number3","number4","number5","number6","number7","number8","number9","number0","birdImg","TextureRegion","splitTexture","bird","x","y","loadAtlas","mainAtlas","findRegions","runAnimation","createAnimation","runAnimation1","rotateIndex","speedup","pipes","accuPipe","stateTime","accuUp","clearColor","createGameLoop","delta","isTouched","console","log","pipe","push","Math","floor","random","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","draw","round","Number","isInteger","toString","i","length","getKeyFrame","PlayMode","LOOP","PI","indexOf","splice","setColor","end","init"],"mappings":"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","file":"static/js/main.53fdb2b1.chunk.js","sourcesContent":["import './index.css';\r\nimport {\r\n  createAnimation,\r\n  createBatch,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  createViewportAwareInputHandler,\r\n  createWhiteTexture,\r\n  loadAtlas,\r\n  loadTexture,\r\n  PlayMode,\r\n  TextureRegion,\r\n  Vector2\r\n} from 'gdxjs';\r\nimport { time } from 'console';\r\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from 'constants';\r\n\r\n// // WebGL\r\nconst stage = createStage();\r\n\r\nconst canvas = stage.getCanvas();\r\n// const ctx = canvas.getContext(\"2d\")\r\nconst viewport = createViewport(canvas, 50, 100);\r\nlet count = 0;\r\nconst inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\nlet store = {\r\n  x: 5,\r\n  y: 5\r\n};\r\nlet score = 0;\r\nlet Realscore = '';\r\nlet stop = 0;\r\nlet indexPipe;\r\nlet indexWire;\r\nlet indexBike;\r\nlet indexBike2;\r\nlet indexGround;\r\nlet indexBee;\r\nlet indexBee2;\r\nlet Time_gia_toc = 0;\r\nlet rotateAngle = 7;\r\nlet roatateTime = 0;\r\nlet lastIndexGround;\r\nlet lastIndexWire;\r\nlet lastIndexBee01;\r\nlet lastIndexBee02;\r\n\r\nconst init = async () => {\r\n  // const stage = createStage();\r\n  // const canvas = stage.getCanvas();\r\n\r\n  // const viewport = createViewport(canvas, 50, 100);\r\n\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n\r\n  let breakFun = function breakFunc() {};\r\n\r\n  const batch = createBatch(gl);\r\n  const whiteTex = createWhiteTexture(gl);\r\n  const birdsImg = await loadTexture(gl, './main.png');\r\n  const skyImg = await loadTexture(gl, './sky.jpg');\r\n  const groundsImg = await loadTexture(gl, './base.jpg');\r\n  const bee1Img = await loadTexture(gl, './bee01.png');\r\n  const bee2Img = await loadTexture(gl, './bee02.png');\r\n\r\n  const pipeImg = await loadTexture(gl, './pipe.png');\r\n  const pipeDownImg = await loadTexture(gl, './pipe-down.png');\r\n  const signImg = await loadTexture(gl, './sign.png');\r\n  const treeImg = await loadTexture(gl, './tree.png');\r\n  const wireImg = await loadTexture(gl, './wire.png');\r\n  const house = await loadTexture(gl, './house.png');\r\n  const cloud = await loadTexture(gl, './cloud.png');\r\n  const sora = await loadTexture(gl, './sora.jpg');\r\n  const number1 = await loadTexture(gl, './1.png');\r\n  const number2 = await loadTexture(gl, './2.png');\r\n  const number3 = await loadTexture(gl, './3.png');\r\n  const number4 = await loadTexture(gl, './4.png');\r\n  const number5 = await loadTexture(gl, './5.png');\r\n  const number6 = await loadTexture(gl, './6.png');\r\n  const number7 = await loadTexture(gl, './7.png');\r\n  const number8 = await loadTexture(gl, './8.png');\r\n  const number9 = await loadTexture(gl, './9.png');\r\n  const number0 = await loadTexture(gl, './0.png');\r\n  const square = await loadTexture(gl, './square.png');\r\n  const bikeImg = await loadTexture(gl, './bike.png');\r\n  const bike2Img = await loadTexture(gl, './bike2.png');\r\n\r\n  const birdImg = TextureRegion.splitTexture(birdsImg, 3, 1);\r\n\r\n  const bird = {\r\n    x: 5,\r\n    y: 40\r\n  };\r\n\r\n  const mainAtlas = await loadAtlas(gl, './enemy.atlas', {});\r\n  const runRegions = mainAtlas.findRegions('boss_projectile_A');\r\n  const runRegions1 = mainAtlas.findRegions('boss_die');\r\n  const runAnimation = createAnimation(0.1, birdImg);\r\n\r\n  const runAnimation1 = createAnimation(50, birdImg);\r\n\r\n  const bees01: { x: number; y: number; powerup: number }[] = [];\r\n  const bees02: { x: number; y: number; powerup: number }[] = [];\r\n  const rotate = [\r\n    -4,\r\n    4.5,\r\n    -5,\r\n    -5.5,\r\n    -6,\r\n    -6.5,\r\n    -7,\r\n    -7.5,\r\n    -8,\r\n    -8.5,\r\n    -9,\r\n    -9.5,\r\n    -10,\r\n    -10.5,\r\n    -11,\r\n    -11.5,\r\n    -12,\r\n    -12.5,\r\n    -13,\r\n    -13.5,\r\n    -14,\r\n    15,\r\n    -15.5,\r\n    -16,\r\n    10,\r\n    9.5,\r\n    9,\r\n    8.5,\r\n    8,\r\n    7.5,\r\n    7,\r\n    6.5,\r\n    6,\r\n    5.5,\r\n    5,\r\n    4.5,\r\n    4,\r\n    3.5,\r\n    3,\r\n    2.5,\r\n    2\r\n  ];\r\n  let rotateIndex = 0;\r\n  let storeValue;\r\n  const bikes1: { x: number; y: number; speedup: number }[] = [\r\n    {\r\n      x: 25,\r\n      y: 80,\r\n      speedup: 0\r\n    }\r\n  ];\r\n  const bikes2: { x: number; y: number; speedup: number }[] = [\r\n    {\r\n      x: 15,\r\n      y: 80,\r\n      speedup: 0\r\n    }\r\n  ];\r\n\r\n  const pipes: { x: number; y: number }[] = [];\r\n  const trees: { x: number; y: number }[] = [\r\n    {\r\n      x: 0,\r\n      y: 80\r\n    }\r\n  ];\r\n  const wires: { x: number; y: number }[] = [\r\n    {\r\n      x: 0,\r\n      y: 65\r\n    },\r\n    {\r\n      x: 25,\r\n      y: 65\r\n    },\r\n    {\r\n      x: 50,\r\n      y: 65\r\n    }\r\n  ];\r\n  let treeIndex = 0;\r\n  let wireIndex = 0;\r\n  // const treebase = {\r\n  //   x: 40,\r\n  //   y: 80\r\n  // }\r\n  const grounds: { x: number; y: number }[] = [\r\n    {\r\n      x: 0,\r\n      y: 90\r\n    },\r\n    {\r\n      x: 10,\r\n      y: 90\r\n    },\r\n    {\r\n      x: 20,\r\n      y: 90\r\n    },\r\n    {\r\n      x: 30,\r\n      y: 90\r\n    },\r\n    {\r\n      x: 40,\r\n      y: 90\r\n    },\r\n    {\r\n      x: 50,\r\n      y: 90\r\n    }\r\n  ];\r\n\r\n  let indexMemo = 0;\r\n  let indexMole = 0;\r\n  const DROP_RATE = 4;\r\n  let accumulate = 0; //?\r\n  let accumulate1 = 0; //?\r\n  let accuTree = 0;\r\n  let accumulate2 = 0;\r\n  let accuPipe = 0;\r\n  let accumulateBee2 = 0;\r\n\r\n  const mole_SIZE = 10;\r\n\r\n  let oldstore = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  let signal = 1;\r\n  let drawSignal = 0;\r\n  let stateTime = 0; //?\r\n  let accumulateScore = 0;\r\n  let accuUp = 0;\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop(delta => {\r\n    accuUp += delta;\r\n    if (accuUp >= 1.5) {\r\n      accuUp = 0;\r\n    }\r\n    if (inputHandler.isTouched() && stop == 0) {\r\n      bird.y = bird.y - 1.5;\r\n      console.log(accuUp);\r\n      Time_gia_toc = 0;\r\n      rotateAngle = 7;\r\n      roatateTime = 0;\r\n\r\n      if (rotateIndex >= 4) {\r\n        rotateIndex = rotateIndex - 4;\r\n      }\r\n    }\r\n    if (inputHandler.isTouched() && stop == 1) {\r\n      for (let pipe of pipes) {\r\n        pipe.x = pipe.x - 30;\r\n      }\r\n      bird.y = 40;\r\n      score = 0;\r\n      stop = 0;\r\n    }\r\n    accumulate += delta;\r\n    accumulate1 += delta;\r\n    accumulate2 += delta;\r\n    accuPipe += delta;\r\n    accuTree += delta;\r\n    accumulateBee2 += delta;\r\n\r\n    if (accuPipe > 1.5 && stop == 0) {\r\n      accuPipe = 0;\r\n\r\n      pipes.push({\r\n        x: 45,\r\n\r\n        y: Math.floor(Math.random() * (80 - 30 + 1)) + 30\r\n      });\r\n    }\r\n    // if (accumulate2 > 3 && stop == 0) {\r\n    //   accumulate2 = 0;\r\n\r\n    //   bikes1.push({\r\n    //     x: 25,\r\n    //     y: 80,\r\n    //     speedup: Math.random()\r\n    //   });\r\n\r\n    //   bikes2.push({\r\n    //     x: 15,\r\n    //     y: 80,\r\n    //     speedup: Math.random()\r\n    //   });\r\n    // }\r\n\r\n    // for (let bee of bees01) {\r\n    //   indexBee = bees01.indexOf(bee);\r\n    //   lastIndexBee01 = bees01.length - 1;\r\n\r\n    //   if (accumulate > 2 && stop == 0) {\r\n    //     accumulate = 0;\r\n\r\n    //     bees01.push({\r\n    //       x: 50,\r\n    //       y: Math.floor(Math.random() * (50 - 30 + 1)) + 30,\r\n    //       powerup: Math.random()\r\n    //     });\r\n    //   }\r\n    //   if (bee.x < -15) {\r\n    //     bees01.splice(indexBee, 1);\r\n    //   }\r\n    // }\r\n    // for (let bee of bees02) {\r\n    //   indexBee2 = bees02.indexOf(bee);\r\n    //   lastIndexBee02 = bees02.length - 1;\r\n\r\n    //   if (accumulateBee2 > 2 && stop == 0) {\r\n    //     accumulateBee2 = 0;\r\n\r\n    //     bees02.push({\r\n    //       x: 50,\r\n    //       y: Math.floor(Math.random() * (60 - 20 + 1)) + 20,\r\n    //       powerup: Math.random()\r\n    //     });\r\n    //   }\r\n    //   if (bee.x < -9) {\r\n    //     bees02.splice(indexBee2, 1);\r\n    //   }\r\n    // }\r\n    // for (let wire of wires) {\r\n    //   indexWire = wires.indexOf(wire);\r\n    //   lastIndexWire = wires.length - 1;\r\n\r\n    //   if (accumulate1 > 4 && stop == 0) {\r\n    //     accumulate1 = 0;\r\n\r\n    //     wires.push({\r\n    //       x: wires[lastIndexWire].x + 25,\r\n    //       y: 65\r\n    //     });\r\n    //   }\r\n    //   if (wire.x < -25) {\r\n    //     wires.splice(indexWire, 1);\r\n    //   }\r\n    // }\r\n\r\n    // for (let ground of grounds) {\r\n    //   indexGround = grounds.indexOf(ground);\r\n    //   lastIndexGround = grounds.length - 1;\r\n    //   if (accuTree > 0.3 && stop == 0) {\r\n    //     accuTree = 0;\r\n\r\n    //     grounds.push({\r\n    //       x: grounds[lastIndexGround].x + 10,\r\n    //       y: 90\r\n    //     });\r\n    //   }\r\n    //   if (ground.x < -10) {\r\n    //     grounds.splice(indexGround, 1);\r\n    //   }\r\n    // }\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.draw(whiteTex, 0, 0, 50, 100);\r\n    Time_gia_toc = Time_gia_toc + delta;\r\n\r\n    if (stop == 0) {\r\n      bird.y = bird.y + 1.3 * Time_gia_toc;\r\n    } else {\r\n      bird.y = bird.y;\r\n    }\r\n    if (Time_gia_toc >= 2) {\r\n      Time_gia_toc = 0;\r\n    }\r\n    // console.log(Time_gia_toc);\r\n\r\n    // for (let wire of wires) {\r\n    //   batch.draw(skyImg, wire.x, wire.y - 70, 25, 75);\r\n\r\n    //   batch.draw(cloud, wire.x, wire.y - 3, 25, 25);\r\n\r\n    //   batch.draw(house, wire.x, wire.y, 25, 25);\r\n\r\n    //   batch.draw(wireImg, wire.x, wire.y, 25, 25);\r\n\r\n    //   batch.draw(treeImg, wire.x, wire.y + 15, 25, 10);\r\n\r\n    //   if (stop == 0) {\r\n    //     wire.x = wire.x - 0.1;\r\n    //   }\r\n    // }\r\n\r\n    // for (let bee of bees01) {\r\n    //   batch.draw(bee1Img, bee.x, bee.y, 15, 8.55);\r\n\r\n    //   if (bee.powerup < 0.4 && stop == 0) {\r\n    //     bee.x = bee.x - 0.2;\r\n    //   } else {\r\n    //     if (stop == 0) {\r\n    //       bee.x = bee.x - 0.5;\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n    // for (let bee of bees02) {\r\n    //   batch.draw(bee2Img, bee.x, bee.y, 9, 7.7);\r\n\r\n    //   if (bee.powerup < 0.2 && stop == 0) {\r\n    //     bee.x = bee.x - 0.2;\r\n    //   } else {\r\n    //     if (stop == 0) {\r\n    //       bee.x = bee.x - 0.8;\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n    // for (let bike of bikes1) {\r\n    //   indexBike = bikes1.indexOf(bike);\r\n\r\n    //   batch.draw(bikeImg, bike.x, bike.y, 60, 10);\r\n\r\n    //   if (stop == 0) {\r\n    //     bike.x = bike.x - 0.3;\r\n    //   }\r\n    //   if (bike.x < -200) {\r\n    //     bikes1.splice(indexBike, 1);\r\n    //   }\r\n    // }\r\n    // for (let bike of bikes2) {\r\n    //   indexBike2 = bikes2.indexOf(bike);\r\n\r\n    //   batch.draw(bike2Img, bike.x, bike.y, 60, 10);\r\n\r\n    //   if (stop == 0) {\r\n    //     bike.x = bike.x - 0.5;\r\n    //   }\r\n    //   if (bike.x < -200) {\r\n    //     bikes2.splice(indexBike2, 1);\r\n    //   }\r\n    // }\r\n    accumulateScore += delta;\r\n    for (let pipe of pipes) {\r\n      batch.draw(pipeImg, pipe.x, pipe.y, 10, 100);\r\n      batch.draw(signImg, pipe.x + 3.5, pipe.y + 7, 3, 3);\r\n\r\n      batch.draw(pipeDownImg, pipe.x, 90 - (90 - pipe.y) - 20 - 100, 10, 100);\r\n      if (stop == 0) {\r\n        pipe.x = pipe.x - 0.5;\r\n      }\r\n\r\n      if (\r\n        bird.y < pipe.y &&\r\n        bird.y > pipe.y - 20 &&\r\n        Math.round(bird.x - pipe.x - 2.5) == 0 &&\r\n        stop == 0\r\n      ) {\r\n        score = score + 0.5;\r\n      } else if (\r\n        (bird.y > pipe.y && bird.x + 5 > pipe.x && bird.x < pipe.x + 10) ||\r\n        (bird.y < pipe.y - 20 && bird.x + 5 > pipe.x && bird.x < pipe.x + 10) ||\r\n        bird.y >= 85\r\n      ) {\r\n        stop = 1;\r\n      }\r\n    }\r\n\r\n    if (Number.isInteger(score)) {\r\n      Realscore = score.toString();\r\n    }\r\n    for (var i = Realscore.length - 1; i >= 0; i--) {\r\n      switch (Realscore[i]) {\r\n        case '0':\r\n          batch.draw(number0, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '1':\r\n          batch.draw(number1, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '2':\r\n          batch.draw(number2, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '3':\r\n          batch.draw(number3, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '4':\r\n          batch.draw(number4, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '5':\r\n          batch.draw(number5, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '6':\r\n          batch.draw(number6, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '7':\r\n          batch.draw(number7, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '8':\r\n          batch.draw(number8, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n        case '9':\r\n          batch.draw(number9, 10 + 2 * i, 0, 2, 2);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // for (let ground of grounds) {\r\n    //   batch.draw(groundsImg, ground.x, ground.y, 10, 10);\r\n    //   if (stop == 0) {\r\n    //     ground.x = ground.x - 0.5;\r\n    //   }\r\n    // }\r\n    if (stop == 0) {\r\n      roatateTime += delta;\r\n      rotateAngle = rotateAngle + 0.2 * roatateTime;\r\n    }\r\n\r\n    if (roatateTime >= 1.5) {\r\n      roatateTime = 0;\r\n    }\r\n    if (stop == 0) {\r\n      runAnimation\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, bird.x, bird.y, 5, 4, 2.5, 2, (rotateAngle * Math.PI) / 4);\r\n    } else {\r\n      runAnimation1\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, bird.x, bird.y, 5, 4, 2.5, 2, (rotateAngle * Math.PI) / 4);\r\n    }\r\n    if (rotateAngle >= 10) {\r\n      rotateAngle = 10;\r\n    }\r\n\r\n    if (rotateIndex < 40) {\r\n      rotateIndex = rotateIndex + 1;\r\n    }\r\n\r\n    stateTime += delta;\r\n\r\n    for (let pipe of pipes) {\r\n      indexPipe = pipes.indexOf(pipe);\r\n      if (pipe.x < -10) {\r\n        pipes.splice(indexPipe, 1);\r\n        // console.log(pipes.length)\r\n      }\r\n    }\r\n\r\n    indexMemo = 1;\r\n\r\n    // batch.draw(scoreImg, 2, 0, 10, 10)\r\n    // batch.draw(square, 20, 20, 10, 10, 7, 10, Math.PI / 2);\r\n    batch.setColor(0.4, 0.4, 0.4, 1);\r\n\r\n    batch.setColor(1, 1, 1, 1);\r\n\r\n    batch.end();\r\n  });\r\n  // grounds.every(function (e) {\r\n  //   e.x = e.x - 10\r\n  //   console.log(e.x)\r\n  // })\r\n};\r\n\r\ninit();\r\n\r\n// /**\r\n//  * 1. Typescript\r\n//  * 2. WebGL\r\n//  * 3. Async/await, promise\r\n//  */\r\n\r\n// const init = async () => {\r\n//   const stage = createStage();\r\n//   const canvas = stage.getCanvas();\r\n//   const viewport = createViewport(canvas, 40, 100);\r\n//   const gl = viewport.getContext();\r\n//   const batch = createBatch(gl);\r\n//   const camera = viewport.getCamera();\r\n\r\n//   const font = await loadFont(gl, './test.fnt');\r\n//   const text = font.createRenderer(100);\r\n\r\n//   gl.clearColor(0, 0, 0, 1);\r\n//   let i = 0;\r\n//   createGameLoop(delta => {\r\n//     i += delta;\r\n//     gl.clear(gl.COLOR_BUFFER_BIT);\r\n//     batch.setProjection(camera.combined);\r\n//     batch.begin();\r\n//     text.draw(batch, 'blahblah: ' + i, 10, 10, 5);\r\n//     batch.end();\r\n//   });\r\n// };\r\n\r\n// init();\r\n"],"sourceRoot":""}