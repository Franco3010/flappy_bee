{"version":3,"sources":["indexLoop.js","stop.js","bee.ts","wire.ts","pipe.ts","ground.ts","bike.ts","bird.ts","index.ts"],"names":["canvas","createStage","getCanvas","viewport","createViewport","gl","getContext","inputHandler","createViewportAwareInputHandler","allIndex","indexBee","indexBee2","indexWire","LastIndexWire","indexHouse","LastIndexHouse","indexCloud","LastIndexCloud","LastIndexTree","indexTree","indexSky","LastIndexSky","indexGround","LastIndexGround","indexBike1","indexBike2","indexPipe","allArray","bees01","bees02","skys","X","Y","wires","grounds","bikes01","bikes02","trees","houses","clouds","x","y","showIndex","index","key","toString","showArray","stop","checkStop","pipes","pipe","bird","resetStop","isTouched","accumulate","Bee","delta","beeX","beeYmax","beeYmin","array","push","Math","floor","random","powerup","img","batch","width","height","bee","indexOf","draw","splice","begin","end","Wire","lastIndex","wireY","wire","length","Pipe","console","log","img1","img2","Ground","Bike","speedBike","bike","Time_gia_toc","rotateAngle","roatateTime","stateTime","Bird","runAnimation","runAnimation1","getKeyFrame","PlayMode","LOOP","PI","a","camera","getCamera","createBatch","whiteTex","createWhiteTexture","loadTexture","skyImg","groundsImg","bee1Img","bee2Img","pipeImg","pipeDownImg","signImg","treeImg","wireImg","houseImg","cloudImg","bikeImg","bike2Img","ground","birdObj","birdsImg","birdImg","TextureRegion","splitTexture","createAnimation","clearColor","createGameLoop","BirdDown","touchBird","pushWire","pushBee","pushBike","pushPipe","pushGround","clear","COLOR_BUFFER_BIT","setProjection","combined","drawWire","drawBee","drawBike","drawPipe","drawGround","rotateRender","setColor","init"],"mappings":"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","file":"static/js/main.764ea7de.chunk.js","sourcesContent":["import {\r\n    createAnimation,\r\n    createBatch,\r\n    createGameLoop,\r\n    createStage,\r\n    createViewport,\r\n    createViewportAwareInputHandler,\r\n    createWhiteTexture,\r\n    loadAtlas,\r\n    loadTexture,\r\n    PlayMode,\r\n    TextureRegion,\r\n    Vector2\r\n  } from 'gdxjs';\r\n\r\n\r\n\r\n  const stage = createStage();\r\n\r\nconst canvas = stage.getCanvas();\r\n// const ctx = canvas.getContext(\"2d\")\r\nexport const viewport = createViewport(canvas, 50, 100);\r\nexport const gl = viewport.getContext();\r\nexport const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n\r\n// async () =>{\r\n//     let allImg = {\r\n//         bee1Img:  await loadTexture(gl, './bee01.png'),\r\n//         bee2Img: 0,\r\n//         treeImg:async () =>{ return await loadTexture(gl, './tree.png')},\r\n//         wireImg:async () =>{ return await loadTexture(gl, './wire.png')},\r\n//         houseImg:async () =>{ return await loadTexture(gl, './house.png')},\r\n//         skyImg:async () =>{ return await loadTexture(gl, './sky.jpg')},\r\n//         groundImg:async () =>{ return await loadTexture(gl, './base.jpg')},\r\n//         bike1Img:async () =>{ return await loadTexture(gl, './bike.png')},\r\n//         bike2Img:async () =>{ return await loadTexture(gl, './bike2.png')},\r\n//         pipeImg:async () =>{ return await loadTexture(gl, './pipe.png')},\r\n//         pipeDownImg:async () =>{ return await loadTexture(gl, './pipe-down.png')},\r\n//         cloudImg:async () =>{ return await loadTexture(gl, './cloud.png')},\r\n//         birdImg:async () =>{ return await loadTexture(gl, './main.png')},\r\n    \r\n    \r\n        \r\n//     }\r\n//     showImg =  (index) => { \r\n//         for(let img in allImg){\r\n//             if(img.toString()==index.toString()){\r\n//                 return allImg[img];\r\n                \r\n//         }\r\n      \r\n//         };\r\n    \r\n//     }\r\n//     x = showImg()\r\n// }\r\n\r\n\r\n\r\nlet allIndex = {\r\n    indexBee:0,\r\n    indexBee2:0,\r\n    indexWire:0,\r\n    LastIndexWire:0,\r\n    indexHouse:0,\r\n    LastIndexHouse:0,\r\n    indexCloud:0,\r\n    LastIndexCloud:0,\r\n    LastIndexTree:0,\r\n    indexTree: 0,\r\n    indexSky:0,\r\n    LastIndexSky:0,\r\n    indexGround:0,\r\n    LastIndexGround:0,\r\n    indexBike1:0,\r\n    indexBike2:0,\r\n    indexPipe:0\r\n}\r\n\r\n  \r\n\r\n\r\n\r\nexport let allArray = {\r\n    bees01:[],\r\n    bees02:[],\r\n    skys:[ {\r\n        X: 0,\r\n        Y: 0\r\n      },\r\n      {\r\n        X: 25,\r\n        Y: 0\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 0\r\n      }],\r\n    wires:[ {\r\n        X: 0,\r\n        Y: 65\r\n      },\r\n      {\r\n        X: 25,\r\n        Y: 65\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 65\r\n      }],\r\n    grounds:[ {\r\n        X: 0,\r\n        Y: 90\r\n      },\r\n      {\r\n        X: 10,\r\n        Y: 90\r\n      },\r\n      {\r\n        X: 20,\r\n        Y: 90\r\n      },\r\n      {\r\n        X: 30,\r\n        Y: 90\r\n      },\r\n      {\r\n        X: 40,\r\n        Y: 90\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 90\r\n      }],\r\n    bikes01:[\r\n        \r\n      ],\r\n    bikes02:[ ],\r\n    trees:[  {\r\n        X: 0,\r\n        Y: 75\r\n      },\r\n      {\r\n        X: 25,\r\n        Y: 75\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 75\r\n      }],\r\n    houses:[ {\r\n        X: 0,\r\n        Y: 65\r\n      },\r\n      {\r\n        X: 25,\r\n        Y: 65\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 65\r\n      }],\r\n    clouds:[{\r\n        X: 0,\r\n        Y: 60\r\n      },\r\n      {\r\n        X: 25,\r\n        Y: 60\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 60\r\n      }],\r\n    skys:[ {\r\n        X: 0,\r\n        Y: 0\r\n      },\r\n      {\r\n        X: 25,\r\n        Y: 0\r\n      },\r\n      {\r\n        X: 50,\r\n        Y: 0\r\n      }],\r\n    pipes:[],\r\n    bird : {\r\n        x:5,\r\n        y:40\r\n    }\r\n}\r\n//  export let pipes = []  \r\n\r\n\r\n \r\n  \r\nlet memory;\r\nexport function showIndex(index){ \r\n    for(let key in allIndex){\r\n        if(key.toString()==index.toString()){\r\n            return allIndex[key];\r\n            \r\n    }\r\n  \r\n    };\r\n\r\n}\r\nexport function showArray(index){ \r\n    for(let key in allArray){\r\n        if(key.toString()==index.toString()){\r\n            return allArray[key];\r\n            \r\n    }\r\n  \r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n","\r\nimport {allArray} from \"./indexLoop\"\r\n\r\nexport let stop = 0\r\n\r\nexport function checkStop(){\r\n    for(let pipe of allArray.pipes){\r\n        // console.log(stop)\r\n        if(\r\n         allArray.bird.y < pipe.Y &&\r\n         allArray.bird.y > pipe.Y - 20 \r\n  ){\r\n    \r\nstop = 0\r\n      }\r\n     \r\n        else if (      \r\n           allArray.bird.y> pipe.Y &&allArray.bird.x + 5 > pipe.X &&allArray.bird.x < pipe.X + 10 ||\r\n           allArray.bird.y< pipe.Y - 20 &&allArray.bird.x + 5 > pipe.X &&allArray.bird.x < pipe.X + 10 ||\r\n           allArray.bird.y>= 85){\r\n            stop = 1 ;\r\n  \r\n        }\r\n    }\r\n } \r\n\r\n export function resetStop(inputHandler){\r\n         if (inputHandler.isTouched() && stop == 1) {\r\n      for (let pipe of allArray.pipes) {\r\n        pipe.X = pipe.X - 30;\r\n      }\r\n      allArray.bird.y = 40;\r\n      stop = 0;\r\n    }\r\n }","import {\r\n  createAnimation,\r\n  createBatch,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  createViewportAwareInputHandler,\r\n  createWhiteTexture,\r\n  loadAtlas,\r\n  loadTexture,\r\n  PlayMode,\r\n  SpriteBatch,\r\n  Texture,\r\n  TextureRegion,\r\n  Vector2\r\n} from 'gdxjs';\r\nimport {stop} from \"./stop\"\r\n\r\nlet accumulate = 0;\r\n\r\n\r\nexport class Bee {\r\n    pushBee(delta:number,beeX:number,beeYmax:number,beeYmin:number,array:{X:number,Y:number,powerup:number}[]){\r\n     accumulate+=delta\r\n      \r\n      if (accumulate > 2 && stop == 0) {\r\n      \r\n        accumulate = 0;\r\n        \r\n            array.push({\r\n              X: beeX,\r\n              Y: Math.floor(Math.random() * (beeYmax - beeYmin + 1)) + beeYmin,\r\n              powerup: Math.random()\r\n            });\r\n      }\r\n    }\r\n\r\n    drawBee(img:Texture,batch:SpriteBatch,array:{X:number,Y:number,powerup:number}[],indexBee:number,width:number,height:number){\r\n   \r\n        for (let bee of array) {\r\n   \r\n            indexBee = array.indexOf(bee);\r\n            batch.draw(img, bee.X, bee.Y, width, height);\r\n      \r\n            if (bee.powerup < 0.4 && stop == 0) {\r\n              bee.X = bee.X - 0.2;\r\n            } else {\r\n              if (stop == 0) {\r\n                bee.X = bee.X - 0.5;\r\n              }\r\n            }\r\n            if (bee.X< -300) {\r\n              array.splice(indexBee, 1);\r\n\r\n            }\r\n          }\r\n        \r\n    }\r\n\r\n  \r\nbegin(batch:SpriteBatch){\r\nbatch.begin()\r\n}\r\nend(batch:SpriteBatch){\r\n  batch.end()\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {\r\n    createAnimation,\r\n    createBatch,\r\n    createGameLoop,\r\n    createStage,\r\n    createViewport,\r\n    createViewportAwareInputHandler,\r\n    createWhiteTexture,\r\n    loadAtlas,\r\n    loadTexture,\r\n    PlayMode,\r\n    SpriteBatch,\r\n    Texture,\r\n    TextureRegion,\r\n    Vector2\r\n  } from 'gdxjs';\r\n  import {stop} from \"./stop\"\r\n\r\n  let accumulate = 0;\r\n  \r\n  \r\n  export class Wire {\r\n      pushWire(delta:number, lastIndex:number,array:{X:number,Y:number}[],indexWire:number,wireY:number){\r\n       accumulate+=delta\r\n        \r\n    \r\n        for (let wire of array) {\r\n            indexWire = array.indexOf(wire);\r\n           lastIndex = array.length - 1;\r\n        \r\n            if (accumulate > 2.5 && stop == 0) {\r\n              accumulate = 0;\r\n        \r\n              array.push({\r\n                X: array[lastIndex].X + 25,\r\n                Y: wireY\r\n              });\r\n            }\r\n            if (wire.X < -25) {\r\n              array.splice(indexWire, 1);\r\n            }\r\n          }\r\n      }\r\n  \r\n      drawWire(img:Texture,batch:SpriteBatch,array:{X:number,Y:number}[],width:number,height:number){\r\n     \r\n        for (let wire of array) {\r\n      \r\n            batch.draw(img, wire.X, wire.Y, width, height);\r\n      \r\n      \r\n            if (stop == 0) {\r\n              wire.X = wire.X - 0.1;\r\n            }\r\n          }\r\n          \r\n      }\r\n  \r\n\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  ","import {\r\n    createAnimation,\r\n    createBatch,\r\n    createGameLoop,\r\n    createStage,\r\n    createViewport,\r\n    createViewportAwareInputHandler,\r\n    createWhiteTexture,\r\n    loadAtlas,\r\n    loadTexture,\r\n    PlayMode,\r\n    SpriteBatch,\r\n    Texture,\r\n    TextureRegion,\r\n    Vector2\r\n  } from 'gdxjs';\r\n  import {stop} from \"./stop.js\" \r\n  let accumulate = 0;\r\n  // export let stop = 0;\r\n  \r\n  \r\n  export class Pipe {\r\n      pushPipe(bird:{x:number,y:number},delta:number,array:{X:number,Y:number}[],indexPipe:number){\r\n       accumulate+=delta\r\n  \r\n        if (accumulate > 1.5  && stop ==0) {\r\n        \r\n          accumulate = 0;\r\n          \r\n              array.push({\r\n                X: 45,\r\n\r\n                Y: Math.floor(Math.random() * (80 - 30 + 1)) + 30\r\n              \r\n              });\r\n        }\r\n        console.log(array.length)\r\n        for (let pipe of array) {  \r\n            \r\n            if (pipe.X < -10) {\r\n              array.splice(indexPipe, 1);\r\n              \r\n          \r\n      }\r\n    }\r\n      }\r\n  \r\n      drawPipe(img:Texture,img1:Texture,img2:Texture,bird:{x:number,y:number},batch:SpriteBatch,array:{X:number,Y:number}[]){\r\n     \r\n          for (let pipe of array) {\r\n     \r\n      batch.draw(img, pipe.X, pipe.Y, 10, 100);\r\n      batch.draw(img1, pipe.X + 3.5, pipe.Y + 7, 3, 3);\r\n\r\n      batch.draw(img2, pipe.X, 90 - (90 - pipe.Y) - 20 - 100, 10, 100);\r\n      if (stop == 0) {\r\n        pipe.X = pipe.X - 0.5;\r\n      }\r\n      // if (\r\n      //   bird.y < pipe.Y &&\r\n      //   bird.y > pipe.Y - 20 &&\r\n      //     Math.round(bird.x - pipe.X - 2.5) == 0 \r\n      //   )  {\r\n      // }\r\n      // else if( \r\n      //   bird.y > pipe.Y && bird.x + 5 > pipe.X && bird.x < pipe.X + 10 ||\r\n      // bird.y < pipe.Y - 20 && bird.x + 5 > pipe.X && bird.x < pipe.X + 10 ||\r\n      // bird.y >= 85\r\n      // ){\r\n      //   pipe.X = pipe.X \r\n      // }\r\n    \r\n  \r\n    \r\n \r\n  }\r\n  \r\n  \r\n}\r\n\r\n  \r\n} \r\n  ","import {\r\n    createAnimation,\r\n    createBatch,\r\n    createGameLoop,\r\n    createStage,\r\n    createViewport,\r\n    createViewportAwareInputHandler,\r\n    createWhiteTexture,\r\n    loadAtlas,\r\n    loadTexture,\r\n    PlayMode,\r\n    SpriteBatch,\r\n    Texture,\r\n    TextureRegion,\r\n    Vector2\r\n  } from 'gdxjs';\r\n  import {stop} from \"./stop\"\r\n\r\n  let accumulate = 0;\r\n  \r\n  \r\n  export class Ground {\r\n      pushGround(delta:number, lastIndex:number,array:{X:number,Y:number}[],indexWire:number,wireY:number){\r\n       accumulate+=delta\r\n        \r\n    \r\n        for (let wire of array) {\r\n            indexWire = array.indexOf(wire);\r\n           lastIndex = array.length - 1;\r\n        \r\n            if (accumulate > 0.3 && stop == 0) {\r\n              accumulate = 0;\r\n        \r\n              array.push({\r\n                X: array[lastIndex].X + 10,\r\n                Y: wireY\r\n              });\r\n            }\r\n            if (wire.X < -10) {\r\n              array.splice(indexWire, 1);\r\n            }\r\n          }\r\n      }\r\n  \r\n      drawGround(img:Texture,batch:SpriteBatch,array:{X:number,Y:number}[]){\r\n     \r\n        for (let wire of array) {\r\n      \r\n            batch.draw(img, wire.X, wire.Y, 10, 10);\r\n      \r\n      \r\n            if (stop == 0) {\r\n              wire.X = wire.X - 0.5;\r\n            }\r\n          }\r\n          \r\n      }\r\n  \r\n    \r\n\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  ","import {\r\n    createAnimation,\r\n    createBatch,\r\n    createGameLoop,\r\n    createStage,\r\n    createViewport,\r\n    createViewportAwareInputHandler,\r\n    createWhiteTexture,\r\n    loadAtlas,\r\n    loadTexture,\r\n    PlayMode,\r\n    SpriteBatch,\r\n    Texture,\r\n    TextureRegion,\r\n    Vector2\r\n  } from 'gdxjs';\r\n  import {stop} from \"./stop\"\r\n  let accumulate = 0;\r\n  \r\n  \r\n  export class Bike {\r\n      pushBike(delta:number,beeX:number,array:{X:number,Y:number,powerup:number}[]){\r\n       accumulate+=delta\r\n        \r\n        if (accumulate > 3 && stop == 0) {\r\n        \r\n          accumulate = 0;\r\n          \r\n              array.push({\r\n                X: beeX,\r\n                Y: 80,\r\n                powerup: Math.random()\r\n              });\r\n        }\r\n      }\r\n  \r\n      drawBike(img:Texture,batch:SpriteBatch,array:{X:number,Y:number,powerup:number}[],indexBee:number,width:number,height:number,speedBike:number){\r\n     \r\n          for (let bike of array) {\r\n     \r\n              indexBee = array.indexOf(bike);\r\n              batch.draw(img, bike.X, bike.Y, width, height);\r\n        \r\n           \r\n                if (stop == 0) {\r\n                  bike.X = bike.X - speedBike;\r\n                }\r\n              \r\n              if (bike.X< -300) {\r\n                array.splice(indexBee, 1);\r\n  \r\n              }\r\n            }\r\n          \r\n      }\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  ","import {\r\n  Animation,\r\n    createAnimation,\r\n    createBatch,\r\n    createGameLoop,\r\n    createStage,\r\n    createViewport,\r\n    createViewportAwareInputHandler,\r\n    createWhiteTexture,\r\n    loadAtlas,\r\n    loadTexture,\r\n    PlayMode,\r\n    SpriteBatch,\r\n    TextureRegion,\r\n    Vector2\r\n  } from 'gdxjs';\r\nimport { ViewportAwareInputHandler } from 'gdxjs/lib/createViewportAwareInputHandler';\r\nimport {stop }from \"./stop\"\r\nlet accumulate = 0;\r\nlet Time_gia_toc = 0;\r\nlet rotateAngle = 7;\r\nlet roatateTime = 0;\r\nlet stateTime = 0;\r\n\r\n  export class Bird {\r\n      BirdDown(delta:number,bird:{x:number,y:number}){\r\n        Time_gia_toc = Time_gia_toc + delta;\r\n\r\n        if (stop == 0) {\r\n          bird.y = bird.y + 1.3 * Time_gia_toc;\r\n        } else {\r\n          bird.y = bird.y;\r\n        }\r\n        if (Time_gia_toc >= 2) {\r\n          Time_gia_toc = 0;\r\n        }\r\n      }\r\n\r\n      touchBird(inputHandler:ViewportAwareInputHandler,delta:number,bird:{x:number,y:number},array:{x:number,y:number}[]){\r\n accumulate += delta;\r\n    if (accumulate >= 1.5) {\r\n      accumulate = 0;\r\n    }\r\n    if (inputHandler.isTouched() && stop == 0) {\r\n      bird.y = bird.y - 1.5;\r\n      Time_gia_toc = 0;\r\n      rotateAngle = 7;\r\n      roatateTime = 0;\r\n\r\n     \r\n    }\r\n\r\n      }\r\nrotateRender(delta:number,runAnimation:Animation,runAnimation1:Animation,batch:SpriteBatch,bird:{x:number,y:number}){\r\n      if (stop == 0) {\r\n      roatateTime += delta;\r\n      rotateAngle = rotateAngle + 0.2 * roatateTime;\r\n    }\r\n\r\n    if (roatateTime >= 1.5) {\r\n      roatateTime = 0;\r\n    }\r\n    if (stop == 0) {\r\n      runAnimation\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, bird.x, bird.y, 5, 4, 2.5, 2, (rotateAngle * Math.PI) / 4);\r\n    } else {\r\n      runAnimation1\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, bird.x, bird.y, 5, 4, 2.5, 2, (rotateAngle * Math.PI) / 4);\r\n    }\r\n    stateTime +=delta\r\n    if (rotateAngle >= 10) {\r\n      rotateAngle = 10;\r\n    }\r\n\r\n \r\n}\r\n// checkBird(bird:{x:number,y:number},array:{x:number,y:number}[],stop:number){\r\n//   for(let pipe of array){\r\n// if (\r\n//         bird.y < pipe.y &&\r\n//         bird.y > pipe.y - 20 &&\r\n//         Math.round(bird.x - pipe.x - 2.5) == 0 &&\r\n//         stop == 0\r\n//       ) {\r\n//       } else if (\r\n//         (bird.y > pipe.y && bird.x + 5 > pipe.x && bird.x < pipe.x + 10) ||\r\n//         (bird.y < pipe.y - 20 && bird.x + 5 > pipe.x && bird.x < pipe.x + 10) ||\r\n//         bird.y >= 85\r\n//       ) {\r\n//         stop = 1;\r\n//       }\r\n    \r\n// }\r\n  }\r\n","import './index.css';\nimport {\n  createAnimation,\n  createBatch,\n  createGameLoop,\n  createStage,\n  createViewport,\n  createViewportAwareInputHandler,\n  createWhiteTexture,\n  loadAtlas,\n  loadTexture,\n  PlayMode,\n  TextureRegion,\n  Vector2\n} from 'gdxjs';\nimport  './bee.ts';\nimport { Bee } from './bee';\nimport {showArray, showIndex,gl,viewport,inputHandler} from './indexLoop.js';\nimport {checkStop,resetStop} from \"./stop\"\nimport { Wire } from './wire';\nimport { Pipe } from './pipe';\nimport { Ground} from './ground'\nimport { Bike} from './bike'\nimport { Bird } from './bird';\n\nconst init = async () => {\n\n  const camera = viewport.getCamera();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteTexture(gl);\n  const skyImg = await loadTexture(gl, './sky.jpg');\n  const groundsImg = await loadTexture(gl, './base.jpg');\n  const bee1Img = await loadTexture(gl, './bee01.png');\n  const bee2Img = await loadTexture(gl, './bee02.png');\n  const pipeImg = await loadTexture(gl, './pipe.png');\n  const pipeDownImg = await loadTexture(gl, './pipe-down.png');\n  const signImg = await loadTexture(gl, './sign.png');\n  const treeImg = await loadTexture(gl, './tree.png');\n  const wireImg = await loadTexture(gl, './wire.png');\n  const houseImg = await loadTexture(gl, './house.png');\n  const cloudImg = await loadTexture(gl, './cloud.png');\n  const bikeImg = await loadTexture(gl, './bike.png');\n  const bike2Img = await loadTexture(gl, './bike2.png');\nlet bee = new Bee();\nlet wire = new Wire();\nlet pipe = new Pipe();\nlet ground = new Ground();\nlet bike = new Bike();\nlet birdObj = new Bird();\nconst birdsImg = await loadTexture(gl, './main.png');\n\n  const birdImg = TextureRegion.splitTexture(birdsImg, 3, 1);\n\n const runAnimation = createAnimation(0.1, birdImg);\n\n  const runAnimation1 = createAnimation(50, birdImg);\n\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    birdObj.BirdDown(delta,showArray(\"bird\"))\n    birdObj.touchBird(inputHandler,delta,showArray(\"bird\"),showArray(\"pipes\"))\n  resetStop(inputHandler)\n    \n    wire.pushWire(delta,showIndex(\"LastIndexSky\"),showArray(\"skys\"),showIndex(\"indexSky\"),0)\n    wire.pushWire(delta,showIndex(\"LastIndexCloud\"),showArray(\"clouds\"),showIndex(\"indexCloud\"),60)\n    wire.pushWire(delta,showIndex(\"LastIndexHouse\"),showArray(\"houses\"),showIndex(\"indexHouse\"),65)\n    wire.pushWire(delta,showIndex(\"LastIndexTree\"),showArray(\"trees\"),showIndex(\"indexTree\"),75)\n    wire.pushWire(delta,showIndex(\"LastIndexWire\"),showArray(\"wires\"),showIndex(\"indexWire\"),65)\n\n    bee.pushBee(delta,80,50,30, showArray(\"bees01\") );\n    bee.pushBee(delta,50,60,20, showArray(\"bees02\") );\n\n    bike.pushBike(delta,25,showArray(\"bikes01\"))\n    bike.pushBike(delta,45,showArray(\"bikes02\"))\n\n    pipe.pushPipe(showArray(\"bird\"),delta,showArray(\"pipes\"),showIndex(\"indexPipe\"))\n    ground.pushGround(delta,showIndex(\"LastIndexGround\"),showArray(\"grounds\"),showIndex(\"indexGround\"),90)\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    bee.begin(batch)\n    batch.draw(whiteTex, 0, 0, 50, 100);\n  \n\nwire.drawWire(skyImg,batch,showArray(\"skys\"),25,75)\nwire.drawWire(cloudImg,batch,showArray(\"clouds\"),25,25)\nwire.drawWire(houseImg,batch,showArray(\"houses\"),25,25)\nwire.drawWire(wireImg,batch,showArray(\"wires\"),25,25)\n\nbee.drawBee(bee1Img,batch,showArray(\"bees01\"),showIndex(\"indexBee\"),15,8.55);\nbee.drawBee(bee2Img,batch,showArray(\"bees02\"),showIndex(\"indexBee2\"),9,7.7);\n\nwire.drawWire(treeImg,batch,showArray(\"trees\"),25,15)\n\nbike.drawBike(bikeImg,batch,showArray(\"bikes01\"),showIndex(\"indexBike1\"),60,10,0.3)\nbike.drawBike(bike2Img,batch,showArray(\"bikes02\"),showIndex(\"indexBike2\"),60,10,0.5)\npipe.drawPipe(pipeImg,signImg,pipeDownImg,showArray(\"bird\"),batch,showArray(\"pipes\"))\nground.drawGround(groundsImg,batch,showArray(\"grounds\"))\n\nbirdObj.rotateRender(delta,runAnimation,runAnimation1,batch,showArray(\"bird\"))\n   \n\ncheckStop();\n\nbatch.setColor(0.4, 0.4, 0.4, 1);\n\nbatch.setColor(1, 1, 1, 1);\n\nbee.end(batch)\n  });\n\n};\n\ninit();\n\n\n"],"sourceRoot":""}